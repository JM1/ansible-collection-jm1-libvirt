---
# NOTE: Variables are sorted by name, for exceptions see comments below.

- name: Set configdrive_filesystem variable to default value
  set_fact:
    configdrive_filesystem: "{{ __configdrive_filesystem }}"
  when: configdrive_filesystem|default(None) == None

- name: Set configdrive_format variable to default value
  set_fact:
    configdrive_format: "{{ __configdrive_format }}"
  when: configdrive_format|default(None) == None

# configdrive (maybe) depends on configdrive_format, hence configdrive is set afterwards
- name: Set configdrive variable to default value
  set_fact:
    configdrive: "{{ __configdrive }}"
  when: configdrive|default(None) == None

- name: Set domain variable to default value
  set_fact:
    domain: "{{ __domain }}"
  when: domain|default(None) == None

- name: Set hardware variable to default value
  set_fact:
    hardware: "{{ __hardware }}"
  when: hardware|default(None) == None

# image and image_format (maybe) depend on image_uri, hence image_uri is set first
- name: Set image_uri variable to default value
  set_fact:
    image_uri: "{{ __image_uri }}"
  when: image_uri|default(None) == None

- name: Set image variable to default value
  set_fact:
    image: "{{ __image }}"
  when: image|default(None) == None

- name: Set image_checksum variable to default value
  set_fact:
    image_checksum: "{{ __image_checksum }}"
  when: image_checksum|default(None) == None

- name: Set image_format variable to default value
  set_fact:
    image_format: "{{ __image_format }}"
  when: image_format|default(None) == None

- name: Set metadata variable to default value
  set_fact:
    metadata: "{{ __metadata }}"
  when: metadata|default(None) == None

- name: Set networkconfig variable to default value
  set_fact:
    networkconfig: "{{ __networkconfig }}"
  when: networkconfig|default(None) == None

- name: Set pool variable to default value
  set_fact:
    pool: "{{ __pool }}"
  when: pool|default(None) == None

- name: Set pool_hardware variable to default value
  set_fact:
    pool_hardware: "{{ __pool_hardware|list }}"
  when: pool_hardware|default(None) == None

- name: Set prealloc_metadata variable to default value
  set_fact:
    prealloc_metadata: "{{ __prealloc_metadata|bool }}"
  when: prealloc_metadata|default(None) == None

- name: Set state variable to default value
  set_fact:
    state: "{{ __state }}"
  when: state|default(None) == None

- name: Set uri variable to default value
  set_fact:
    uri: "{{ __uri }}"
  when: uri|default(None) == None

- name: Set userdata variable to default value
  set_fact:
    userdata: "{{ __userdata }}"
  when: userdata|default(None) == None

- name: Set volume_capacity variable to default value
  set_fact:
    volume_capacity: "{{ __volume_capacity }}"
  when: volume_capacity|default(None) == None

- name: Set volume_cow variable to default value
  set_fact:
    volume_cow: "{{ __volume_cow|bool }}"
  when: volume_cow|default(None) == None

- name: Set volume_format variable to default value
  set_fact:
    volume_format: "{{ __volume_format }}"
  when: volume_format|default(None) == None

# volume (maybe) depends on volume_format, hence volume is set afterwards
- name: Set volume variable to default value
  set_fact:
    volume: "{{ __volume }}"
  when: volume|default(None) == None

- name: Fail if required vars are not set
  fail:
  when: >
    configdrive == None or configdrive|length == 0 or
    configdrive_filesystem == None or configdrive_filesystem|length == 0 or
    configdrive_format == None or configdrive_format|length == 0 or
    domain == None or domain|length == 0 or
    image == None or image|length == 0 or
    image_format == None or image_format|length == 0 or
    image_uri == None or image_uri|length == 0 or
    pool == None or image_uri|length == 0 or
    state == None or state|length == 0 or
    uri == None or uri|length == 0 or
    userdata == None or userdata|length == 0 or
    volume == None or volume|length == 0 or
    volume_capacity == None or volume_capacity|length == 0 or
    volume_format == None or volume_format|length == 0

- name: Fail if vars have invalid values
  fail:
  when: >
    prealloc_metadata|type_debug != 'bool' or
    (state != 'present' and state != 'absent') or
    volume_cow|type_debug != 'bool'

- name: Fail if volume names are equal
  fail:
  when: >
    configdrive == image or
    configdrive == volume or
    image == volume

- name: Create domain, storage volumes and storage pool
  when: state == 'present'
  block:
  - name: Create storage pool before volume creation
    jm1.libvirt.virt_pool:
      uri: '{{ uri }}'
      name: '{{ pool }}'
      hardware: '{{ pool_hardware }}'
      state: present

  - name: Fetch and setup base OS image
    jm1.libvirt.virt_volume_import:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name:  '{{ image }}'
      image: '{{ image_uri }}'
      checksum: '{{ image_checksum }}'
      format: '{{ image_format }}'
      state: present

  - name: Create OS volume
    jm1.libvirt.virt_volume_snapshot:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name: '{{ volume }}'
      capacity: '{{ volume_capacity }}'
      format: '{{ volume_format }}'
      backing_vol: '{{ image }}'
      backing_vol_format: '{{ image_format }}'
      linked: '{{ volume_cow }}'
      prealloc_metadata: '{{ prealloc_metadata }}'
      state: present

  - name: Create cloud-init config drive volume
    jm1.libvirt.virt_volume_cloudinit:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name: '{{ configdrive }}'
      format: '{{ configdrive_format }}'
      filesystem: '{{ configdrive_filesystem }}'
      metadata: '{{ metadata }}'
      userdata: '{{ userdata }}'
      networkconfig: '{{ networkconfig }}'
      state: present

  - name: Create domain # after storage creation
    jm1.libvirt.virt_domain:
      uri: '{{ uri }}'
      name: '{{ domain }}'
      hardware: '{{ hardware }}'
      state: present

- name: Delete domain, storage volumes and storage pool
  when: state == 'absent'
  block:
  - name: Delete domain before storage deletion
    jm1.libvirt.virt_domain:
      uri: '{{ uri }}'
      name: '{{ domain }}'
      state: absent

  - name: Delete OS volume before base OS image deletion
    jm1.libvirt.virt_volume_snapshot:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name: '{{ volume }}'
      state: absent

  - name: Delete base OS image
    jm1.libvirt.virt_volume_import:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name:  '{{ image }}'
      state: absent

  - name: Delete cloud-init config drive volume
    jm1.libvirt.virt_volume_cloudinit:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name: '{{ configdrive }}'
      state: absent

  - name: Delete storage pool after volume deletion
    jm1.libvirt.virt_pool:
      uri: '{{ uri }}'
      name: '{{ pool }}'
      state: absent

- name: Cleanup role variables
  set_fact:
    configdrive: !!null
    configdrive_filesystem: !!null
    configdrive_format: !!null
    domain: !!null
    hardware: !!null
    image: !!null
    image_checksum: !!null
    image_format: !!null
    image_uri: !!null
    metadata: !!null
    networkconfig: !!null
    pool: !!null
    pool_hardware: !!null
    prealloc_metadata: !!null
    state: !!null
    uri: !!null
    userdata: !!null
    volume: !!null
    volume_capacity: !!null
    volume_cow: !!null
    volume_format: !!null
