---
# Copyright (c) 2021-2022 Jakob Meng, <jakobmeng@web.de>
# vim:set fileformat=unix tabstop=2 shiftwidth=2 expandtab:
# kate: end-of-line unix; space-indent on; indent-width 2; remove-trailing-spaces modified;

- name: Fail if required vars are not set
  fail:
  when: >
    configdrive == None or configdrive|length == 0 or
    configdrive_filesystem == None or configdrive_filesystem|length == 0 or
    configdrive_format == None or configdrive_format|length == 0 or
    domain == None or domain|length == 0 or
    image == None or image|length == 0 or
    image_format == None or image_format|length == 0 or
    image_uri == None or image_uri|length == 0 or
    pool == None or pool|length == 0 or
    state == None or state|length == 0 or
    uri == None or uri|length == 0 or
    userdata == None or userdata|length == 0 or
    volume == None or volume|length == 0 or
    volume_capacity == None or volume_capacity|length == 0 or
    volume_format == None or volume_format|length == 0

- name: Fail if vars have invalid values
  fail:
  when: >
    prealloc_metadata|type_debug != 'bool' or
    (state != 'present' and state != 'absent') or
    volume_cow|type_debug != 'bool'

- name: Fail if volume names are equal
  fail:
  when: >
    configdrive == image or
    configdrive == volume or
    image == volume

- name: Create storage volumes and domain
  when: state == 'present'
  block:
  - name: Fetch and setup base OS image
    jm1.libvirt.volume_import:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name:  '{{ image }}'
      image: '{{ image_uri }}'
      checksum: '{{ image_checksum }}'
      format: '{{ image_format }}'
      state: present

  - name: Create OS volume
    jm1.libvirt.volume_snapshot:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name: '{{ volume }}'
      capacity: '{{ volume_capacity }}'
      format: '{{ volume_format }}'
      backing_vol: '{{ image }}'
      backing_vol_format: '{{ image_format }}'
      linked: '{{ volume_cow }}'
      prealloc_metadata: '{{ prealloc_metadata }}'
      state: present

  - name: Create cloud-init config drive volume
    jm1.libvirt.volume_cloudinit:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name: '{{ configdrive }}'
      format: '{{ configdrive_format }}'
      filesystem: '{{ configdrive_filesystem }}'
      metadata: '{{ metadata }}'
      userdata: '{{ userdata }}'
      networkconfig: '{{ networkconfig }}'
      state: present

  - name: Create domain # after storage creation
    jm1.libvirt.domain:
      uri: '{{ uri }}'
      name: '{{ domain }}'
      hardware: '{{ hardware }}'
      state: present

- name: Delete domain and storage volumes
  when: state == 'absent'
  block:
  - name: Delete domain before storage deletion
    jm1.libvirt.domain:
      uri: '{{ uri }}'
      name: '{{ domain }}'
      state: absent

  - name: Delete OS volume before base OS image deletion
    jm1.libvirt.volume_snapshot:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name: '{{ volume }}'
      state: absent

  - name: Delete base OS image
    jm1.libvirt.volume_import:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name:  '{{ image }}'
      state: absent

  - name: Delete cloud-init config drive volume
    jm1.libvirt.volume_cloudinit:
      uri: '{{ uri }}'
      pool: '{{ pool }}'
      name: '{{ configdrive }}'
      state: absent
